From 24c7b0ef31dd072811f5cee8aa506a2aee0d5635 Mon Sep 17 00:00:00 2001
From: Kevin Kim <kk2849@nyu.edu>
Date: Sun, 22 Apr 2018 18:28:57 -0400
Subject: [PATCH] Implement lazy allocation

---
 Makefile  |  2 +-
 defs.h    |  1 +
 sysproc.c |  3 +--
 trap.c    | 11 +++++++++++
 vm.c      |  4 ++--
 5 files changed, 16 insertions(+), 5 deletions(-)

diff --git a/Makefile b/Makefile
index b4fd9a2..1891079 100644
--- a/Makefile
+++ b/Makefile
@@ -210,7 +210,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 ifndef CPUS
 CPUS := 2
 endif
-QEMUOPTS = -hdb fs.img xv6.img -smp $(CPUS) -m 512 $(QEMUEXTRA)
+QEMUOPTS = -hdb fs.img xv6.img -smp $(CPUS) -m 512 $(QEMUEXTRA) -display none
 
 qemu: fs.img xv6.img
 	$(QEMU) -serial mon:stdio $(QEMUOPTS)
diff --git a/defs.h b/defs.h
index b47372b..49a1691 100644
--- a/defs.h
+++ b/defs.h
@@ -156,6 +156,7 @@ void            idtinit(void);
 extern uint     ticks;
 void            tvinit(void);
 extern struct spinlock tickslock;
+extern int      mappages(pde_t*, void*, uint, uint, int);
 
 // uart.c
 void            uartinit(void);
diff --git a/sysproc.c b/sysproc.c
index 027a5e5..5851ddd 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -51,8 +51,7 @@ sys_sbrk(void)
   if(argint(0, &n) < 0)
     return -1;
   addr = proc->sz;
-  if(growproc(n) < 0)
-    return -1;
+  proc->sz = addr + n;
   return addr;
 }
 
diff --git a/trap.c b/trap.c
index 3f80145..133181d 100644
--- a/trap.c
+++ b/trap.c
@@ -46,6 +46,16 @@ trap(struct trapframe *tf)
     return;
   }
 
+  if(tf->trapno == T_PGFLT){
+     char* memory;
+     uint pg;
+     pg = PGROUNDDOWN(rcr2());
+     memory = kalloc();
+     memset(memory, 0, PGSIZE);
+     mappages(proc->pgdir, (char*)pg, PGSIZE, v2p(memory), PTE_W|PTE_U);
+     return;
+  }
+
   switch(tf->trapno){
   case T_IRQ0 + IRQ_TIMER:
     if(cpu->id == 0){
@@ -86,6 +96,7 @@ trap(struct trapframe *tf)
               tf->trapno, cpu->id, tf->eip, rcr2());
       panic("trap");
     }
+
     // In user space, assume process misbehaved.
     cprintf("pid %d %s: trap %d err %d on cpu %d "
             "eip 0x%x addr 0x%x--kill proc\n",
diff --git a/vm.c b/vm.c
index 5326d14..72be399 100644
--- a/vm.c
+++ b/vm.c
@@ -67,7 +67,7 @@ walkpgdir(pde_t *pgdir, const void *va, int alloc)
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
-static int
+int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
   char *a, *last;
@@ -320,7 +320,7 @@ copyuvm(pde_t *pgdir, uint sz)
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
       panic("copyuvm: pte should exist");
     if(!(*pte & PTE_P))
-      panic("copyuvm: page not present");
+      continue;
     pa = PTE_ADDR(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
-- 
2.7.4

