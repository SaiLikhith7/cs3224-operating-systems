From d040218bd30959ed52e0000b8ecd650882981442 Mon Sep 17 00:00:00 2001
From: Kevin Kim <kk2849@nyu.edu>
Date: Wed, 4 Apr 2018 22:37:50 -0400
Subject: [PATCH 1/2] Implement scheduling algorithms

---
 Makefile  |  22 ++++-
 defs.h    |   1 +
 init.c    |   9 ++
 param.h   |   2 +-
 proc.c    | 283 ++++++++++++++++++++++++++++++++++++++++++++++++++++++--------
 proc.h    |  10 +++
 syscall.c |   4 +
 syscall.h |   2 +
 sysproc.c |  25 ++++++
 user.h    |   2 +
 usys.S    |   2 +
 11 files changed, 325 insertions(+), 37 deletions(-)

diff --git a/Makefile b/Makefile
index b4fd9a2..bb58f80 100644
--- a/Makefile
+++ b/Makefile
@@ -69,18 +69,32 @@ QEMU = $(shell if which qemu > /dev/null; \
 	echo "***" 1>&2; exit 1)
 endif
 
+
+SCHEDFLAG = DEFAULT
+
 CC = $(TOOLPREFIX)gcc
 AS = $(TOOLPREFIX)gas
 LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
 #CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
-CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -fvar-tracking -fvar-tracking-assignments -O0 -g -Wall -MD -gdwarf-2 -m32 -Werror -fno-omit-frame-pointer
+CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -fvar-tracking -fvar-tracking-assignments -O0 -g -Wall -MD -gdwarf-2 -m32 -Werror -fno-omit-frame-pointer 
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
 ASFLAGS = -m32 -gdwarf-2 -Wa,-divide
 # FreeBSD ld wants ``elf_i386_fbsd''
 LDFLAGS += -m $(shell $(LD) -V | grep elf_i386 2>/dev/null)
 
+
+ifeq ($(SCHEDFLAG),FRR)
+	CFLAGS += -D FRR
+else
+	ifeq ($(SCHEDFLAG),FCFS)
+		CFLAGS += -D FCFS
+	else
+		CFLAGS += -D DEFAULT
+	endif
+endif
+
 xv6.img: bootblock kernel fs.img
 	dd if=/dev/zero of=xv6.img count=10000
 	dd if=bootblock of=xv6.img conv=notrunc
@@ -172,6 +186,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_sanity\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -210,7 +225,10 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 ifndef CPUS
 CPUS := 2
 endif
-QEMUOPTS = -hdb fs.img xv6.img -smp $(CPUS) -m 512 $(QEMUEXTRA)
+QEMUOPTS = -hdb fs.img xv6.img -smp $(CPUS) -m 512 $(QEMUEXTRA) -display none
+
+flags:
+	@echo $(SCHEDFLAG)
 
 qemu: fs.img xv6.img
 	$(QEMU) -serial mon:stdio $(QEMUOPTS)
diff --git a/defs.h b/defs.h
index b47372b..89ed1f7 100644
--- a/defs.h
+++ b/defs.h
@@ -118,6 +118,7 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int 		wait_stat(int *wtime, int *rtime, int *iotime, int *status);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/init.c b/init.c
index 046b551..43947bc 100644
--- a/init.c
+++ b/init.c
@@ -19,6 +19,15 @@ main(void)
   dup(0);  // stdout
   dup(0);  // stderr
 
+  #ifdef DEFAULT
+    printf(1, "Scheduler policy: DEFAULT\n");
+  #elif FRR
+    printf(1, "Scheduler policy: FIFO RR\n");
+  #elif FCFS
+    printf(1, "Scheduler policy: FCFS\n");
+  #endif
+
+
   for(;;){
     printf(1, "init: starting sh\n");
     pid = fork();
diff --git a/param.h b/param.h
index a7e90ef..3555722 100644
--- a/param.h
+++ b/param.h
@@ -11,4 +11,4 @@
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       1000  // size of file system in blocks
-
+#define QUANTA	     5 // process default quanta
diff --git a/proc.c b/proc.c
index fee4e95..92d08df 100644
--- a/proc.c
+++ b/proc.c
@@ -6,12 +6,33 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "queue.h"
 
 struct {
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
 
+struct queue {
+  struct spinlock queue_lock;
+  struct proc *queue[NPROC];
+  int count;
+};
+
+struct queue proc_queue;
+
+void queue_init(struct queue *q);
+
+int get_size(struct queue *q);
+
+//add a new node to queue
+void enq(struct queue *q, struct proc *p);
+
+//init the queue
+
+//remove first node from queue
+struct proc * deq(struct queue *q);
+
 static struct proc *initproc;
 
 int nextpid = 1;
@@ -20,6 +41,11 @@ extern void trapret(void);
 
 static void wakeup1(void *chan);
 
+/* declaring all the schedualers: */
+void scheduler_default(void) __attribute__((noreturn));
+void scheduler_frr(void) __attribute__((noreturn));
+void scheduler_fcfs(void) __attribute__((noreturn));
+
 void
 pinit(void)
 {
@@ -70,6 +96,11 @@ found:
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
 
+	p->ctime = ticks;
+	p->stime = 0;
+	p->retime = 0;
+	p->rutime = 0;
+
   return p;
 }
 
@@ -254,6 +285,54 @@ wait(void)
   }
 }
 
+int wait_stat(int *wtime, int *rtime, int *iotime, int *status)
+{
+  struct proc *p;     //initalize  struct to use for the son procces
+  int havekids, pid;
+
+  acquire(&ptable.lock);
+  for(;;){
+    // Scan through table looking for zombie children.
+    havekids = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->parent != proc)
+        continue;
+      havekids = 1;
+
+      if(p->state == ZOMBIE){
+
+        // Found one.
+        pid = p->pid;
+        kfree(p->kstack);
+        p->kstack = 0;
+        freevm(p->pgdir);
+        p->state = UNUSED;
+        p->pid = 0;
+        p->parent = 0;
+        p->name[0] = 0;
+        p->killed = 0;
+
+        *iotime = p->stime;
+        *rtime = p->rutime;
+        *wtime = p->retime;
+        if (status != NULL)
+          *status= p->exit_status;
+        release(&ptable.lock);
+        return pid;
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || proc->killed){
+      release(&ptable.lock);
+      return -1;
+    }
+
+    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+    sleep(proc, &ptable.lock);  //DOC: wait-sleep
+  }
+}
+
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
@@ -265,40 +344,13 @@ wait(void)
 void
 scheduler(void)
 {
-  struct proc *p;
-  int foundproc = 1;
-
-  for(;;){
-    // Enable interrupts on this processor.
-    sti();
-
-    if (!foundproc) hlt();
-
-    foundproc = 0;
-
-    // Loop over process table looking for process to run.
-    acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
-
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      foundproc = 1;
-      proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-      swtch(&cpu->scheduler, proc->context);
-      switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      proc = 0;
-    }
-    release(&ptable.lock);
-
-  }
+  #ifdef DEFAULT
+    scheduler_default();
+  #elif FRR
+    scheduler_frr();
+  #elif FCFS
+    scheduler_fcfs();
+  #endif
 }
 
 // Enter scheduler.  Must hold only ptable.lock
@@ -327,6 +379,7 @@ yield(void)
 {
   acquire(&ptable.lock);  //DOC: yieldlock
   proc->state = RUNNABLE;
+  proc->retime = ticks;
   sched();
   release(&ptable.lock);
 }
@@ -470,3 +523,165 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+// SCHEDULER POLICY 3.1
+void scheduler_default(void)
+{
+  struct proc *p;
+  for (; ;) {
+    // Enable interrupts on this processor.
+    sti();
+
+    // Loop over process table looking for process to run.
+    acquire(&ptable.lock);
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+      if (p->state != RUNNABLE)
+        continue;
+
+      runtime=ticks;
+      findtime=ticks;
+      // Switch to chosen process.  It is the process's job
+      // to release ptable.lock and then reacquire it
+      // before jumping back to us.
+      proc = p;
+      while (runtime-findtime <= QUANTA)
+      {
+        switchuvm(p);
+        p->state = RUNNING;
+	p->rutime = ticks;
+        swtch(&cpu->scheduler, proc->context);
+        switchkvm();
+        if (proc->state != RUNNABLE)
+          break;
+      }
+
+      // Process is done running for now.
+      // It should have changed its p->state before coming back.
+      proc = 0;
+    }
+    release(&ptable.lock);
+  }
+}
+
+// SCHEDULER POLICY 3.2
+void scheduler_frr(void)
+{
+  struct proc *p;
+
+  for (; ;)
+  {
+    // Enable interrupts on this processor.
+    sti();
+    acquire(&ptable.lock);
+    if (get_size(&proc_queue)==0)
+    {
+      release(&ptable.lock);
+      continue;
+    }
+    p = deq(&proc_queue);
+    //timers for quanta
+    runtime = ticks;
+    findtime = runtime;
+
+    proc = p;
+    while (runtime - findtime <= QUANTA)
+    {
+      switchuvm(p);
+      p->state = RUNNING;
+      swtch(&cpu->scheduler, proc->context);
+      switchkvm();
+      if (proc->state != RUNNABLE)
+        break;
+    }
+
+    if (p->state==RUNNABLE)
+      enq(&proc_queue,p);
+    // Process is done running for now.
+    // It should have changed its p->state before coming back.
+    proc = 0;
+    release(&ptable.lock);
+  }
+}
+
+// SCHEDULER POLICY 3.3
+void scheduler_fcfs(void)
+{
+  struct proc *p;
+  //init the queue
+  for (; ;)
+  {
+    // Enable interrupts on this processor.
+    sti();
+    acquire(&ptable.lock);
+    if (get_size(&proc_queue)==0)
+    {
+      release(&ptable.lock);
+      continue;
+    }
+    p = deq(&proc_queue);
+    //timers for quanta
+    runtime = ticks;
+    findtime = runtime;
+
+    proc = p;
+    while (1)
+    {
+      switchuvm(p);
+      p->state = RUNNING;
+      swtch(&cpu->scheduler, proc->context);
+      switchkvm();
+      if (proc->state != RUNNABLE)
+        break;
+    }
+    if (p->state==RUNNABLE)
+      enq(&proc_queue,p);
+    // Process is done running for now.
+    // It should have changed its p->state before coming back.
+    proc = 0;
+    release(&ptable.lock);
+  }
+}
+
+//getter for q->count
+int get_size(struct queue *q)
+{
+  return q->count;
+}
+
+//increment count
+void inc_size(struct queue *q)
+{
+  q->count += 1;
+}
+
+//decrease count
+void dec_size(struct queue *q)
+{
+  q->count -= 1;
+}
+
+/* Enqueing into the queue */
+void enq(struct queue *q, struct proc *p)
+{
+  q->queue[q->count++] = p;
+}
+
+/* Dequeing the queue */
+struct proc *deq(struct queue *q)
+{
+  int i;
+  struct proc *ans;
+  if (q->count == 0)
+    return 0;
+  ans = q->queue[0];
+  for (i = 0; i < q->count - 1 ; i++)
+      q->queue[i] = q->queue[i+1];
+  q->count--;
+  return ans;
+}
+
+void queue_init(struct queue *q)
+{
+  q->count=0;
+  initlock(&q->queue_lock, "proc_queue");
+}
diff --git a/proc.h b/proc.h
index 3b9c3ac..0943bcf 100644
--- a/proc.h
+++ b/proc.h
@@ -1,5 +1,6 @@
 // Segments in proc->gdt.
 #define NSEGS     7
+#define NULL ((void*)0)
 
 // Per-CPU state
 struct cpu {
@@ -19,6 +20,9 @@ struct cpu {
 extern struct cpu cpus[NCPU];
 extern int ncpu;
 
+int runtime;
+int findtime;
+
 // Per-CPU variables, holding pointers to the
 // current cpu and to the current process.
 // The asm suffix tells gcc to use "%gs:0" to refer to cpu
@@ -66,6 +70,12 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int exit_status;	       // exit status
+  int ctime;                   // Process creation time
+  int ttime;                   // Process termination time
+  int stime;                   // Process SLEEPING time
+  int retime;                  // Process READY(RUNNABLE) time
+  int rutime;                  // Process RUNNING time
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 799ebc2..57c6c52 100644
--- a/syscall.c
+++ b/syscall.c
@@ -98,6 +98,8 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_wait_stat(void);
+extern int sys_yield(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -121,6 +123,8 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_wait_stat]   sys_wait_stat,
+[SYS_yield]    sys_yield,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..aeb0212 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_wait_stat 22
+#define SYS_yield 23
diff --git a/sysproc.c b/sysproc.c
index 027a5e5..b056f90 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -89,3 +89,28 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_wait_stat(void)
+{
+  int *wtime;
+  int *iotime;
+  int *rtime;
+  int *status;
+
+  if (argptr(0,(char **) &wtime, sizeof(wtime)) < 0)
+    return -1;
+  if (argptr(1,(char **) &rtime, sizeof(rtime)) < 0)
+    return -1;
+  if (argptr(2,(char **) &iotime, sizeof(iotime)) < 0)
+    return -1;
+  if (argptr(3,(char **) &status, sizeof(status)) < 0)
+    return -1;
+
+  return wait_stat(wtime,rtime,iotime,status);
+}
+
+int sys_yield(void) {
+  yield();
+  return 0;
+}
diff --git a/user.h b/user.h
index f45b8d5..5887018 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int wait_stat(int *wtime, int *rtime, int *iotime, int *status);
+int yield(void);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..eb5f310 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,5 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(wait_stat)
+SYSCALL(yield)
-- 
2.7.4

