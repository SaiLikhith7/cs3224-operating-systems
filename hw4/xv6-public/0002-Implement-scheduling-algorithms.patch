From 261d6f30ff69aa932b0f6e37e233248c5253757d Mon Sep 17 00:00:00 2001
From: Kevin Kim <kk2849@nyu.edu>
Date: Wed, 4 Apr 2018 22:38:25 -0400
Subject: [PATCH 2/2] Implement scheduling algorithms

---
 sanity.c | 99 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 99 insertions(+)
 create mode 100644 sanity.c

diff --git a/sanity.c b/sanity.c
new file mode 100644
index 0000000..7295302
--- /dev/null
+++ b/sanity.c
@@ -0,0 +1,99 @@
+//Kevin Kim kk2849
+//OS-S18
+
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int proc_num =20; //number of times to fork
+  int index, type_flag;
+  int pid;
+
+  int sleep_time = 0;
+  int ready_time = 0;
+  int turnaround_time = 0;
+
+  int type_index, cpu_computations;
+  int wait_time, run_time, io_time, status;
+
+/* user defined number of processes
+  if (argc < 1) {
+    printf(1, "No input argv");
+    exit();
+  } else {
+    proc_num = atoi(argv[1]) * 3;
+  }
+*/
+  for (index = 0; index < proc_num; index++) {
+    pid = fork();
+
+    if (pid == 0) {
+      continue;
+    } else if (pid % 3 == 1) {
+      for (type_index = 0; type_index < 100; type_index++) {
+        cpu_computations = 0;
+        while (cpu_computations < 100000) { //increment 100,000 times
+          cpu_computations++;
+        }
+      }
+      type_flag = 1;
+      break;
+    } else if (pid % 3 == 2) {
+      for (type_index = 0; type_index < 100; type_index++) {
+        cpu_computations = 0;
+        while (cpu_computations < 100000) { //increment 100,000 times
+          cpu_computations++;
+        }
+        yield();
+      }
+      type_flag = 2;
+      break;
+    } else if (pid % 3 == 0) {
+      type_index = 0;
+      while (type_index < 100) {
+        type_index++;
+        sleep(1);
+      }
+      type_flag = 3;
+      break;
+    } else {
+      exit();
+    }
+    type_flag = 0;
+
+  }
+  
+  wait_stat(&wait_time, &run_time, &io_time, &status);
+
+  sleep_time += io_time;
+  ready_time += wait_time;
+  turnaround_time = turnaround_time + wait_time + run_time + io_time + status;
+
+  switch (type_flag) {
+  case 0:
+    sleep_time = sleep_time / proc_num;
+    ready_time = ready_time / proc_num;
+    turnaround_time = turnaround_time / proc_num;
+    printf(1, "This is the parent process \n");
+    printf(1, "wait time = %d, run time = %d, io time = %d\n", wait_time, run_time, io_time);
+    printf(1, "average sleep time = %d, average ready time = %d, average turnaround time = %d\n\n", sleep_time, ready_time, turnaround_time);
+    break;
+  case 1:
+    printf(1, "pid= %d, type = CPU \n", pid);
+    printf(1, "wait time = %d, run time = %d, io time = %d\n", wait_time, run_time, io_time);
+    break;
+  case 2:
+    printf(1, "pid= %d, type = SCPU \n", pid);
+    printf(1, "wait time = %d, run time = %d, io time = %d\n", wait_time, run_time, io_time);
+    break;
+  case 3:
+    printf(1, "pid= %d, type = IO \n", pid);
+    printf(1, "wait time = %d, run time = %d, io time = %d\n", wait_time, run_time, io_time);
+    break;
+  }
+
+  exit();
+}
-- 
2.7.4

